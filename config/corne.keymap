/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define HYP LS(LC(LA(LGUI)))

/ {
        behaviors {
                // General
                media: airpods_media {
                        compatible = "zmk,behavior-tap-dance";
                        label = "airpods-like media key";
                        #binding-cells = <0>;
                        bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREVIOUS>;
                };
                pgdnend: pg_dn_or_end {
                        compatible = "zmk,behavior-tap-dance";
                        label = "page down or END";
                        #binding-cells = <0>;
                        bindings = <&kp PG_DN>, <&kp END>;
                };
                pguphome: pg_up_or_home {
                        compatible = "zmk,behavior-tap-dance";
                        label = "page up or HOME";
                        #binding-cells = <0>;
                        bindings = <&kp PG_UP>, <&kp HOME>;
                };
                gresc: grave_escape {
                        compatible = "zmk,behavior-mod-morph";
                        label = "escape or graves";
                        #binding-cells = <0>;
                        bindings = <&kp ESC>, <&kp GRAVE>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                rhsthumb: backspace_letter_word {
                        compatible = "zmk,behavior-mod-morph";
                        label = "backspace letter or word";
                        #binding-cells = <0>;
                        bindings = <&lt 2 BSPC>, <&lt 2 LA(BSPC)>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                snipping: snipping_arc {
                        compatible = "zmk,behavior-mod-morph";
                        label = "generic snipping tool or arc snipping tool";
                        #binding-cells = <0>;
                        bindings = <&macosst>, <&arcst>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                
                // Amethyst Mod Morphs
                layouts: swithc_main_or_layout {
                        compatible = "zmk,behavior-mod-morph";
                        label = "switch main or layout";
                        #binding-cells = <0>;
                        bindings = <&swap_main>, <&cycle_layout>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                amethystleft: amethyst_left {
                        compatible = "zmk,behavior-mod-morph";
                        label = "cycle or expand left";
                        #binding-cells = <0>;
                        bindings = <&swap_ccw>, <&decrease_main>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                amethystright: amethyst_right {
                        compatible = "zmk,behavior-mod-morph";
                        label = "cycle or expand right";
                        #binding-cells = <0>;
                        bindings = <&swap_cw>, <&enlarge_main>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };


                // Arc Mod Morphs
                nextts: next_tab_space {
                        compatible = "zmk,behavior-mod-morph";
                        label = "next arc tab or next arc space";
                        #binding-cells = <0>;
                        bindings = <&next_tab>, <&next_space>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                prevts: prev_tab_space {
                        compatible = "zmk,behavior-mod-morph";
                        label = "previous arc tab or previous arc space";
                        #binding-cells = <0>;
                        bindings = <&prev_tab>, <&prev_space>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                // Auto-completion Mod Morphs
                sqtdqt: sqt_dqt {
                        compatible = "zmk,behavior-mod-morph";
                        label = "autocompleting single or double quotes";
                        #binding-cells = <0>;
                        bindings = <&autosqt>, <&autodqt>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };
                commaangle: comma_angle {
                        compatible = "zmk,behavior-mod-morph";
                        label = "autocompleting comma or angle";
                        #binding-cells = <0>;
                        bindings = <&kp COMMA>, <&autoangle>;
                        mods = <(MOD_LSFT|MOD_RSFT)>;
                };

                // Auto-completion Tap Dances
                autoparen: auto_paren {
                        compatible = "zmk,behavior-tap-dance";
                        label = "autocompleting parenthesis";
                        #binding-cells = <0>;
                        bindings = <&kp LPAR>, <&m_parent>;
                };
                autocurly: auto_curly {
                        compatible = "zmk,behavior-tap-dance";
                        label = "autocompleting curly braces";
                        #binding-cells = <0>;
                        bindings = <&kp LBRC>, <&m_crly_bracket>;
                };
                autosquare: auto_square {
                        compatible = "zmk,behavior-tap-dance";
                        label = "autocompleting square braces";
                        #binding-cells = <0>;
                        bindings = <&kp LBKT>, <&m_sqr_bracket>;
                };
                autoangle: auto_angle {
                        compatible = "zmk,behavior-tap-dance";
                        label = "autocompleting angled braces";
                        #binding-cells = <0>;
                        bindings = <&kp LT>, <&m_angle_bracket>;
                };
                autosqt: auto_single_quote {
                        compatible = "zmk,behavior-tap-dance";
                        label = "autocompleting double quote";
                        #binding-cells = <0>;
                        bindings = <&kp SQT>, <&m_single_quote>;
                };
                autodqt: auto_double_quote {
                        compatible = "zmk,behavior-tap-dance";
                        label = "autocompleting single quote";
                        #binding-cells = <0>;
                        bindings = <&kp DQT>, <&m_double_quote>;
                };
        };

        macros {
                // Auto-completion Macros
                m_parent: parenthesis {
                        label = "autocompleting parenthesis";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp LPAR>
                                , <&macro_tap &kp RPAR>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_sqr_bracket: square_brackets {
                        label = "autocompleting square brackets";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp LBKT>
                                , <&macro_tap &kp RBKT>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_crly_bracket: curly_brackets {
                        label = "autocompleting curly brackets";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp LBRC>
                                , <&macro_tap &kp RBRC>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_angle_bracket: angle_brackets {
                        label = "autocompleting angled brackets";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_release &kp LSFT>
                                , <&macro_tap &kp LT>
                                , <&macro_tap &kp GT>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_single_quote: single_quotes {
                        label = "autocompleting single quotes";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp SQT>
                                , <&macro_tap &kp SQT>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_double_quote: double_quotes {
                        label = "autocompleting double quotes";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_release &kp LSFT>
                                , <&macro_tap &kp DQT>
                                , <&macro_tap &kp DQT>
                                , <&macro_tap &kp LEFT>
                                ;
                };

                // Snipping Tool Macros
                macosst: macos_snipping_tool {
                        label = "MacOS snipping tool";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LCTRL &kp LSFT>
                                , <&macro_tap &kp N4>
                                , <&macro_release &kp LGUI &kp LCTRL &kp LSFT>
                                ;
                };
                arcst: arc_snipping_tool {
                        label = "Arc snipping tool";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LSFT>
                                , <&macro_tap &kp N2>
                                , <&macro_release &kp LGUI &kp LSFT>
                                ;
                };

                // Arc Macros
                next_tab: arc_next_tab {
                        label = "cycle to next arc tab";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LALT>
                                , <&macro_tap &kp DOWN>
                                , <&macro_release &kp LGUI &kp LALT>
                                ;
                };
                prev_tab: arc_prev_tab {
                        label = "cycle to previous arc tab";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LALT>
                                , <&macro_tap &kp UP>
                                , <&macro_release &kp LGUI &kp LALT>
                                ;
                };
                next_space: arc_next_space {
                        label = "cycle to next arc space";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LALT>
                                , <&macro_tap &kp RIGHT>
                                , <&macro_release &kp LGUI &kp LALT>
                                ;
                };
                prev_space: arc_prev_space {
                        label = "cycle to previous arc space";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LALT>
                                , <&macro_tap &kp LEFT>
                                , <&macro_release &kp LGUI &kp LALT>
                                ;
                };

                // Amethyst macros
                swap_ccw: amethyst_swap_countercw {
                        label = "amethyst swap window counter clockwise";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LALT>
                                , <&macro_tap &kp LEFT>
                                , <&macro_release &kp LCTRL &kp LALT>
                                ;
                };
                swap_cw: amethyst_swap_cw {
                        label = "amethyst swap window clockwise";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LALT>
                                , <&macro_tap &kp RIGHT>
                                , <&macro_release &kp LCTRL &kp LALT>
                                ;
                };
                swap_main: amethyst_swap_main {
                        label = "amethyst swap focused with main";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LALT>
                                , <&macro_tap &kp RET>
                                , <&macro_release &kp LCTRL &kp LALT>
                                ;
                };
                enlarge_main: amethyst_enlarge_main {
                        label = "amethyst enlarge focused window";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LCTRL &kp LALT>
                                , <&macro_tap &kp UP>
                                , <&macro_release &kp LGUI &kp LCTRL &kp LALT>
                                ;
                };    
                decrease_main: amethyst_decrease_main {
                        label = "amethyst decrease focused window";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LCTRL &kp LALT>
                                , <&macro_tap &kp DOWN>
                                , <&macro_release &kp LGUI &kp LCTRL &kp LALT>
                                ;
                };
                cycle_layout: amethyst_cycle_layout {
                        label = "amethyst cycle layout";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LALT>
                                , <&macro_tap &kp UP>
                                , <&macro_release &kp LCTRL &kp LALT>
                                ;
                };

                // Text Movement
                select_word: select_word {
                        label = "select current word";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LALT>
                                , <&macro_tap &kp LEFT>
                                , <&macro_press &kp LSHFT>
                                , <&macro_tap &kp RIGHT>
                                , <&macro_release &kp LSHFT>
                                , <&macro_release &kp LALT>
                                ;
                };
                select_next_word: select_next_word {
                        label = "select next word";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LALT>
                                , <&macro_press &kp LSHFT>
                                , <&macro_tap &kp RIGHT>
                                , <&macro_release &kp LSHFT>
                                , <&macro_release &kp LALT>
                                ;
                };
        };

        keymap {
                compatible = "zmk,keymap";
                alphas {
                        bindings = <
                                &gresc &kp Q &kp W &kp E &kp R &kp T     &kp Y &kp U &kp I &kp O &kp P &kp DEL
                                &kp TAB &kp A &kp S &kp D &kp F &kp G     &kp H &kp J &kp K &kp L &kp SEMI &sqtdqt
                                &kp LSFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M &commaangle &kp DOT &kp FSLH &kp HYP
                                &kp LALT &kp LGUI &lt 1 SPACE            &rhsthumb &lt 3 RET &kp RCTRL
                        >;
                };
                numbers {
                        bindings = <
                                &kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                            &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp DEL
                                &trans &snipping &prevts &layouts &amethyst_left &amethyst_right        &none &none &none &none &kp MINUS &kp EQUAL
                                &trans &none &nextts &none &none &none                                  &none &none &none &none &none &none
                                &trans &trans &trans                                                    &trans &trans &trans
                        >;
                };
                movement {
                        bindings = <
                                &trans &bt BT_CLR &none &none &none &none       &kp LA(LEFT) &pgdnend &pguphome &kp LA(RIGHT) &media &kp DEL 
                                &trans &bt BT_NXT &none &none &none &none       &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp C_VOL_UP &none
                                &trans &bt BT_PRV &none &none &none &none       &select_word &none &none &select_next_word &kp C_VOL_DN &none
                                &trans &trans &trans                            &trans &trans &trans
                        >;
                };
                symbols {
                        bindings = <
                                &kp TILDE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT         &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp DEL
                                &trans &none &kp FSLH &autocurly &autosquare &autoparen       &kp RPAR &kp RBKT &kp RBRC &kp BSLH &kp UNDER &kp PLUS
                                &trans &none &none &none &none &none                          &none &none &none &none &none &none
                                &trans &trans &trans                                          &trans &trans &trans
                        >;
                }; 
        };
};