/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&caps_word {
        continue-list = <UNDERSCORE MINUS>;
};

/ {
        behaviors {
                
                // alphabet -> numbers tap dances 
                q1: q_1 {
                        label = "Q or 1";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp Q>, <&kp N1>;
                };
                w2: w_2 {
                        label = "W or 2";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp W>, <&kp N2>;
                };
                E3: e_3 {
                        label = "E or 3";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp E>, <&kp N3>;
                };
                r4: r_4 {
                        label = "R or 4";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp R>, <&kp N4>;
                };
                t5: t_5 {
                        label = "T or 5";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp T>, <&kp N5>;
                };
                y6: y_6 {
                        label = "Y or 6";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp Y>, <&kp N6>;
                };
                u7: u_7 {
                        label = "U or 7";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp U>, <&kp N7>;
                };
                i8: i_8 {
                        label = "I or 8";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp I>, <&kp N8>;
                };
                o9: o_9 {
                        label = "O or 9";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp O>, <&kp N9>;
                };
                p0: p_0 {
                        label = "P or 0";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp P>, <&kp N0>;
                };

                // hjkl -> arrow keys 
                hleft: h_left {
                        label = "H or Left";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp H>, <&kp LEFT>;
                };
                jdown: down {
                        label = "J or Down";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp J>, <&kp DOWN>;
                };
                kup: k_up {
                        label = "K or UP";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp K>, <&kp UP>;
                };
                lright: l_right {
                        label = "L or Right";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp L>, <&kp RIGHT>;
                };

                // shift or caps word
                shiftcw: shift_caps_word {
                        label = "Shift or Caps Word";
                        compatible = "zmk,behavior-tap-dance";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp LSHFT>, <&caps_word>;
                };

                // graves escape
                gresc: grave_escape {
                        compatible = "zmk,behavior-mod-morph";
                        label = "Escape or Graves";
                        #binding-cells = <0>;
                        bindings = <&kp ESC>, <&kp GRAVE>;
                        mods = <(MOD_LGUI|MOD_RGUI)>;
                };

                sqtdqt: sqt_dqt {
                        compatible = "zmk,behavior-mod-morph";
                        label = "Single or double quotes";
                        #binding-cells = <0>;
                        bindings = <&autosqt>, <&autodqt>;
                        mods = <(MOD_LGUI|MOD_RGUI)>;
                };

                commaangle: comma_angle {
                        compatible = "zmk,behavior-mod-morph";
                        label = "Comma or angle";
                        #binding-cells = <0>;
                        bindings = <&kp COMMA>, <&autoangle>;
                        mods = <(MOD_LGUI|MOD_RGUI)>;
                };

                // auto completion
                autoparen: auto_paren {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Auto parenthesis";
                        #binding-cells = <0>;
                        bindings = <&kp LPAR>, <&m_parent>;
                };
                autocurly: auto_curly {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Auto curly braces";
                        #binding-cells = <0>;
                        bindings = <&kp LBRC>, <&m_crly_bracket>;
                };
                autosquare: auto_square {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Auto square braces";
                        #binding-cells = <0>;
                        bindings = <&kp LBKT>, <&m_sqr_bracket>;
                };
                autoangle: auto_angle {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Auto angled braces";
                        #binding-cells = <0>;
                        bindings = <&kp LT>, <&m_angle_bracket>;
                };
                autosqt: auto_single_quote {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Auto double quote";
                        #binding-cells = <0>;
                        bindings = <&kp SQT>, <&m_single_quote>;
                };
                autodqt: auto_double_quote {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Auto single quote";
                        #binding-cells = <0>;
                        bindings = <&kp DQT>, <&m_auto_double_quote>;
                };
        };

        macros {
                // auto completion
                m_parent: parenthesis {
                        label = "Parenthesis";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp LPAR>
                                , <&macro_tap &kp RPAR>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_sqr_bracket: square_brackets {
                        label = "Square brackets";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp LBKT>
                                , <&macro_tap &kp RBKT>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_crly_bracket: curly_brackets {
                        label = "Curly brackets";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp LBRC>
                                , <&macro_tap &kp RBRC>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_angle_bracket: angle_brackets {
                        label = "Angled brackets";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp LT>
                                , <&macro_tap &kp GT>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_single_quote: single_quotes {
                        label = "Single quotes";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp SQT>
                                , <&macro_tap &kp SQT>
                                , <&macro_tap &kp LEFT>
                                ;
                };
                m_double_quote: double_quotes {
                        label = "Double quotes";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_tap &kp DQT>
                                , <&macro_tap &kp DQT>
                                , <&macro_tap &kp LEFT>
                                ;
                };

                // window management / navigation
                rect_left: rect_left {
                        label = "Rectangle left";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LALT>
                                , <&macro_tap &kp LEFT>
                                , <&macro_release &kp LCTRL &kp LALT>
                                ;
                };
                rect_right: rect_right {
                        label = "Rectangle right";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LALT>
                                , <&macro_tap &kp RIGHT>
                                , <&macro_release &kp LCTRL &kp LALT>
                                ;
                };
                rect_full: rect_full {
                        label = "Rectangle full";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LCTRL &kp LALT>
                                , <&macro_tap &kp RET>
                                , <&macro_release &kp LCTRL &kp LALT>
                                ;
                };
                move_app_left: move_app_left {
                        label = "Move app left";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LCTRL &kp LALT>
                                , <&macro_tap &kp LEFT>
                                , <&macro_release &kp LGUI &kp LCTRL &kp LALT>
                                ;
                };    
                move_app_right: move_app_right {
                        label = "Move app right";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI &kp LCTRL &kp LALT>
                                , <&macro_tap &kp RIGHT>
                                , <&macro_release &kp LGUI &kp LCTRL &kp LALT>
                                ;
                };

                // text movement
                skip_word_left: skip_word_left {
                        label = "Skip word left";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LALT>
                                , <&macro_tap &kp LEFT>
                                , <&macro_release &kp LALT>
                                ;
                };    
                skip_word_right: skip_word_right {
                        label = "Skip word right";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LALT>
                                , <&macro_tap &kp RIGHT>
                                , <&macro_release &kp LALT>
                                ;
                };

                select_word: select_word {
                        label = "Select word";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_tap &kp LEFT>
                                , <&macro_press &kp LSHFT>
                                , <&macro_tap &kp RIGHT>
                                , <&macro_release &kp LSHFT>
                                , <&macro_release &kp LGUI>
                                ;
                };
                select_next_word: select_next_word {
                        label = "Select next word";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_press &kp LSHFT>
                                , <&macro_tap &kp RIGHT>
                                , <&macro_release &kp LSHFT>
                                , <&macro_release &kp LGUI>
                                ;
                };
        };

        keymap {
                compatible = "zmk,keymap";
                alphas {
                        bindings = <
                                &gresc &q1 &w2 &e3 &r4 &t5               &y6 &u7 &i8 &o9 &p0 &kp BSPC
                                &kp TAB &kp A &kp S &kp D &kp F &kp G    &hleft &jdown &kup &lright &kp SEMI &sqtdqt
                                &shiftcw &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M &commaangle &kp DOT &kp FSLH &kp RET
                                &kp LALT &kp LGUI &lt 1 SPACE            &lt 2 BSPC &lt 3 RET &kp RCTRL
                        >;
                };
                numbers {
                        bindings = <
                                &kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5                   &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp BSPC
                                &trans &none &none &rect_full &rect_left &rect_right  &kp N4 &kp N5 &kp N6 &kp BSLH &kp MINUS &kp EQUAL
                                &trans &none &none &none &move_app_left &move_app_right        &kp N1 &kp N2 &kp N3 &none &none &trans
                                &trans &trans &trans                                           &kp DEL &trans &trans
                        >;
                };
                symbols {
                        bindings = <
                                &kp TILDE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT         &kp CARET &kp AMPS &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
                                &trans &none &kp FSLH &autocurly &autosquare &autoparen       &kp RPAR &kp RBKT &kp RBRC &kp BSLH &kp UNDER &kp PLUS
                                &trans &none &none &none &none &none                          &none &none &none &none &none &trans
                                &trans &trans &trans                                          &trans &trans &trans
                        >;
                };
                movement {
                        bindings = <
                                &kp ESC &kp F1 &kp F2 &kp F3 &kp F4 &bt BT_CLR    &skip_word_left &kp PG_DN &kp PG_UP &skip_word_right &none &kp DEL 
                                &trans &kp F5 &kp F6 &kp F7 &kp F8 &bt BT_NXT     &kp LEFT &kp DOWN &kp UP &kp RIGHT &none &none
                                &trans &kp F9 &kp F10 &kp F11 &kp F12 &bt BT_PRV  &none &kp END &kp HOME &none &none &trans
                                &trans &trans &trans                              &trans &trans &trans
                        >;
                }; 
        };
};
